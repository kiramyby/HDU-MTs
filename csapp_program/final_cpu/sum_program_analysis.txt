数组求和程序 - 内存变化分析

=== 程序功能 ===
这是一个数组求和程序，具体功能：
1. 从内存地址0x10开始读取3个连续的32位字
2. 将这3个数值进行累加求和
3. 将求和结果存储到内存地址0x30
4. 程序执行完成后，地址0x30的值应该是源数据的和

=== 关键内存地址 ===
- 地址16-18 (0x10-0x12): 源数据数组
- 地址48 (0x30): 求和结果存储位置

=== 修改后的内存布局 ===

源数据区域 (地址16-18):
地址16 (0x10): 00000001  ← 第1个数值 = 1
地址17 (0x11): 00000002  ← 第2个数值 = 2  
地址18 (0x12): 00000003  ← 第3个数值 = 3

结果存储区域 (地址48):
地址48 (0x30): FFFFFFFF  ← 执行前的初始值（明显的标记值）

=== 程序执行过程 ===
1. a0 = 0x10 (源数组起始地址)
2. a1 = 3 (要读取的元素个数)
3. a2 = 0x30 (结果存储地址)
4. 调用BankSum函数：
   - t0 = 0x10 (当前读取地址)
   - t1 = 3 (循环计数器)
   - t2 = 0 (累加器)
   - 循环读取并累加：
     * 读取地址16: t2 = 0 + 1 = 1
     * 读取地址17: t2 = 1 + 2 = 3  
     * 读取地址18: t2 = 3 + 3 = 6
   - 将结果6存储到地址48

=== 执行后的内存变化 ===
地址48 (0x30): FFFFFFFF → 00000006

预期结果：
- 源数据: 1 + 2 + 3 = 6
- 地址48的值从FFFFFFFF变为00000006

=== 验证点 ===
执行前检查：
- 地址16: 00000001
- 地址17: 00000002  
- 地址18: 00000003
- 地址48: FFFFFFFF

执行后检查：
- 地址16: 00000001 (不变)
- 地址17: 00000002 (不变)
- 地址18: 00000003 (不变)
- 地址48: 00000006 ✓ (1+2+3的结果)

这样的设计使得程序的功能和执行效果非常容易验证和观察。
